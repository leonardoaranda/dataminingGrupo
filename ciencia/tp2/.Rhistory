add_trace(fuzzyResults[fuzzyResults$k == 4,], x = memb.exp, y = silhuette_avg.width)
plot_ly(fuzzyResults[fuzzyResults$k == 2,], x = memb.exp, y = silhuette_avg.width, name = "k = 2")
add_trace(fuzzyResults[fuzzyResults$k == 4,], x = memb.exp, y = silhuette_avg.width, name = "k = 4")
plot_ly(fuzzyResults.max, x = k, y= silhuette_avg.width) %>%
add_trace(x = k, y = coeff)
plot_ly(fuzzyResults.max, x = k, y= silhuette_avg.width, name="silhuette") %>%
add_trace(x = k, y = coeff, name="coeff")
plot_ly(fuzzyResults[fuzzyResults$k == 2,], x = memb.exp, y = silhuette_avg.width, name = "k = 2")
add_trace(fuzzyResults[fuzzyResults$k == 3,], x = memb.exp, y = silhuette_avg.width, name = "k = 3")
add_trace(fuzzyResults[fuzzyResults$k == 4,], x = memb.exp, y = silhuette_avg.width, name = "k = 4")
fuzzyResults.max
plot_ly(fuzzyResults.max, x = k, y= silhuette_avg.width, name="silhuette") %>%
add_trace(x = k, y = coeff, name="coeff")
df.fuzzy.2 = fanny( df.dist, k = 2, diss = T,  memb.exp = 1.2, keep.diss = F, keep.data = F)
library(cluster)
library(MASS)
library(fpc)
library(doMC)
registerDoMC(3)
df.fuzzy.2 = fanny( df.dist, k = 2, diss = T,  memb.exp = 1.2, keep.diss = F, keep.data = F)
df = read.csv("../tp1/data_tp1.csv",row.names = 1)
df.dist = dist(df, method = "euclidean")
df.fuzzy.2 = fanny( df.dist, k = 2, diss = T,  memb.exp = 1.2, keep.diss = F, keep.data = F)
plot(df.fuzzy.2$silinfo)
plot(df.fuzzy.2$silinfo$widths)
?silhouette
silhouette(df.fuzzy.2)
plot(silhouette(df.fuzzy.2))
pdf("asd.pdf")
plot(silhouette(df.fuzzy.2))
dev.off()
df.fuzzy.3 = fanny( df.dist, k = 3, diss = T,  memb.exp = 1.2, keep.diss = F, keep.data = F)
pdf("asd.pdf")
plot(silhouette(df.fuzzy.2))
plot(silhouette(df.fuzzy.3))
dev.off()
df.fuzzy.4 = fanny( df.dist, k = 4, diss = T,  memb.exp = 1.2, keep.diss = F, keep.data = F)
pdf("asd.pdf")
plot(silhouette(df.fuzzy.2))
plot(silhouette(df.fuzzy.3))
plot(silhouette(df.fuzzy.4))
dev.off()
plot_ly(fuzzyResults.max, x = k, y= silhuette_avg.width, name="silhuette") %>%
add_trace(x = k, y = coeff, name="coeff")
plot_ly(fuzzyResults[fuzzyResults$k == 2,], x = memb.exp, y = coeff, name = "k = 2")
add_trace(fuzzyResults[fuzzyResults$k == 3,], x = memb.exp, y = coeff, name = "k = 3")
add_trace(fuzzyResults[fuzzyResults$k == 4,], x = memb.exp, y = coeff, name = "k = 4")
plot_ly(fuzzyResults[fuzzyResults$k == 2,], x = memb.exp, y = coeff, name = "k = 2")
add_trace(fuzzyResults[fuzzyResults$k == 3,], x = memb.exp, y = coeff, name = "k = 3")
add_trace(fuzzyResults[fuzzyResults$k == 4,], x = memb.exp, y = coeff, name = "k = 4")
df.fuzzy.2$k.crisp
df.fuzzy.3$k.crisp = fanny( df.dist, k = 3, diss = T,  memb.exp = 1.2, keep.diss = F, keep.data = F)
df.fuzzy.4$k.crisp
df.fuzzy.3 = fanny( df.dist, k = 3, diss = T,  memb.exp = 1.2, keep.diss = F, keep.data = F)
df.fuzzy.2$silinfo$widths
str(df.fuzzy.2$silinfo$widths)
head(df.fuzzy.2$silinfo$widths)
df.fuzzy.2$silinfo$widths[1]
df.fuzzy.2$silinfo$widths[,1]
head(df.fuzzy.2$silinfo$widths[ df.fuzzy.2$silinfo$widths[,3] < 0 ])
head(df.fuzzy.2$silinfo$widths[ df.fuzzy.2$silinfo$widths[,3] < 0, ])
df.fuzzy.2.negSil = df.fuzzy.2$silinfo$widths[ df.fuzzy.2$silinfo$widths[,3] < 0, ]
df.fuzzy.2.negSil
names(df.fuzzy.2.negSil)
rownames(df.fuzzy.2.negSil)
df.fuzzy.2$membership
df.fuzzy.2$membership[ rownames(df.fuzzy.2.negSil), ]
df.fuzzy.2.negSil
cbind ( df.fuzzy.2$membership[ rownames(df.fuzzy.2.negSil), ], df.fuzzy.2.negSil[3] )
cbind ( df.fuzzy.2$membership[ rownames(df.fuzzy.2.negSil), ], df.fuzzy.2.negSil[,3] )
df.fuzzy.3.negSil = df.fuzzy.3$silinfo$widths[ df.fuzzy.3$silinfo$widths[,3] < 0, ]
df.fuzzy.3.negSil
cbind ( df.fuzzy.3$membership[ rownames(df.fuzzy.3.negSil), ], df.fuzzy.3.negSil[,3] )
plot_ly(fuzzyResults.max, x = k, y= silhuette_avg.width, name="silhuette") %>%
add_trace(x = k, y = coeff, name="coeff")
plot_ly(fuzzyResults[fuzzyResults$k == 2,], x = memb.exp, y = coeff, name = "k = 2")
add_trace(fuzzyResults[fuzzyResults$k == 3,], x = memb.exp, y = coeff, name = "k = 3")
add_trace(fuzzyResults[fuzzyResults$k == 4,], x = memb.exp, y = coeff, name = "k = 4")
seq(1,1.2,0.02)
df.fuzzy.2$silinfo$widths[ df.fuzzy.2$silinfo$widths[,3] > 0.4, ]
df.fuzzy.2.highSil = df.fuzzy.2$silinfo$widths[ df.fuzzy.2$silinfo$widths[,3] > 0.4, ]
cbind ( df.fuzzy.2$membership[ rownames(df.fuzzy.2.highSil), ], df.fuzzy.2.highSil[,3] )
seq(1,1.2,0.02)
foreach(varMemb.exp = seq(1,1.2,0.02)) %dopar% {
t0 = Sys.time()
df.fuzz = fanny( df.dist, k = varK, diss = T,  memb.exp = varMemb.exp, keep.diss = F, keep.data = F)
t1 = Sys.time()
# cat("Tiempo: ", as.numeric(t1 - t0))
cat("tp1", varK, varMemb.exp, df.fuzz$silinfo$avg.width, df.fuzz$coeff[2], as.numeric(t1 - t0, units = "secs"),
file = "fuzzy_results.csv", sep = ",", append = T, fill = T)
}
varK = 2
foreach(varMemb.exp = seq(1,1.2,0.02)) %dopar% {
t0 = Sys.time()
df.fuzz = fanny( df.dist, k = varK, diss = T,  memb.exp = varMemb.exp, keep.diss = F, keep.data = F)
t1 = Sys.time()
# cat("Tiempo: ", as.numeric(t1 - t0))
cat("tp1", varK, varMemb.exp, df.fuzz$silinfo$avg.width, df.fuzz$coeff[2], as.numeric(t1 - t0, units = "secs"),
file = "fuzzy_results.csv", sep = ",", append = T, fill = T)
}
fuzzyResults =read.csv("fuzzy_results.csv")
table(f$k)
table(fuzzyResults$k)
plot_ly( fuzzyResults[ fuzzyResults$k == 2, ], x = memb.exp, y = coeff  )
fuzzyResults[ fuzzyResults$k == 2, ]
plot_ly( fuzzyResults[ fuzzyResults$k == 2 && fuzzyResults$coeff > 0 , ], x = memb.exp, y = coeff  )
fuzzyResults[ fuzzyResults$k == 2 && fuzzyResults$coeff > 0 , ]
fuzzyResults[ (fuzzyResults$k == 2 && fuzzyResults$coeff > 0) , ]
subset(fuzzyResults, k == 2)
subset(fuzzyResults, k == 2 && coeff > 0)
subset(fuzzyResults, k == 2, coeff > 0)
subset(fuzzyResults, k == 2 and coeff > 0)
subset(fuzzyResults, k == 2 && coeff > 0)
subset(fuzzyResults, k == 2 ^ coeff > 0)
subset(fuzzyResults, k == 2 && coeff > 0)
?subset
str(fuzzyResults)
fuzzyResults$k == 2 && fuzzyResults$coeff > 0
plot_ly( fuzzyResults[ fuzzyResults$k == 2, ], x = memb.exp, y = coeff  )
fuzzyResults[ fuzzyResults$k == 2, ]
sort(fuzzyResults[ fuzzyResults$k == 2, ])
?sort
fuzzyResults[ fuzzyResults$k == 2, ] %>%
order_by("memb.exp")
fuzzyResults[ fuzzyResults$k == 2, ] %>%
order_by(memb.exp)
?order_by
order_by(fuzzyResults[ fuzzyResults$k == 2, ], memb.exp)
order_by(fuzzyResults[ fuzzyResults$k == 2, ])
fuzzyResults[ fuzzyResults$k == 2, ] %>%
order_by(memb.exp)
fuzzyResults[ fuzzyResults$k == 2, ] %>%
filter( coeff > 0 )
fuzzyResults %>%
filter( k == 2, coeff > 0 )
fuzzyResults %>%
filter( k == 2, coeff > 0 ) %>%
plot_ly(x = memb.exp, y = coeff  )
fuzzyResults %>%
filter( k == 2, coeff > 0 ) %>%
arrange(memb.exp)
fuzzyResults %>%
filter( k == 2, coeff > 0 ) %>%
arrange(memb.exp) %>%
plot_ly(x = memb.exp, y = coeff  )
library(cluster)
library(MASS)
library(fpc)
df = read.csv("../tp1/data_tp1.csv",row.names = 1)
summary(df)
rownames(df)
nrow(df)
df.dist = dist(df, method = "euclidean")
df.fuzzy.3 = fanny( df.dist, k = 3, diss = T,  memb.exp = 1.2, keep.diss = F, keep.data = F)
qplot(df.pca.pc1,df.pca.pc2, colour = colores[df.fuzzy.3.clusters[,1]] )
library(ggplot2)
qplot(df.pca.pc1,df.pca.pc2, colour = colores[df.fuzzy.3.clusters[,1]] )
colores = c("#766171","#4ADBC0","#F5AE3A")
qplot(df.pca.pc1,df.pca.pc2, colour = colores[df.fuzzy.3.clusters[,1]] )
df.fuzzy.3.clusters = apply(df.fuzzy.3$membership, 1, which.max)
df.fuzzy.3.clusters = cbind(df.fuzzy.3.clusters, apply(df.fuzzy.3$membership, 1, max) )
head(df.fuzzy.3.clusters)
qplot(df.pca.pc1,df.pca.pc2, colour = colores[df.fuzzy.3.clusters[,1]] )
df.pca <- prcomp(df)
df.pca.pc1 <- df.pca$x[,1]
df.pca.pc2 <- df.pca$x[,2]
df.pca.bind = cbind(df.pca.pc1, df.pca.pc2 )
colnames(df.pca.bind) = c("pc1","pc2")
df.pca.bind = as.data.frame(df.pca.bind)
qplot(df.pca.pc1,df.pca.pc2, colour = colores[df.fuzzy.3.clusters[,1]] )
qplot(df.pca.pc1,df.pca.pc2, colour = colores[df.fuzzy.3.clusters[,1]], alpha = df.fuzzy.3.clusters[,2])
qplot(df.pca.pc1,df.pca.pc2, colour = df.fuzzy.3.clusters[,1], alpha = df.fuzzy.3.clusters[,2])
qplot(df.pca.pc1,df.pca.pc2, colour = factor(colores[df.fuzzy.3.clusters[,1]]), alpha = df.fuzzy.3.clusters[,2])
qplot(df.pca.pc1,df.pca.pc2, colour = factor(df.fuzzy.3.clusters[,1]), alpha = df.fuzzy.3.clusters[,2])
colores = c("#FF0000","#00FF00","#0000FF")
qplot(df.pca.pc1,df.pca.pc2, colour = factor(colores[df.fuzzy.3.clusters[,1]]), alpha = df.fuzzy.3.clusters[,2])
qplot(df.pca.pc1,df.pca.pc2, colour = factor(colores[df.fuzzy.3.clusters[,1]]), alpha = df.fuzzy.3.clusters[,2])
qplot(df.pca.pc1,df.pca.pc2, colour = factor(colores[df.fuzzy.3.clusters[,1]]), alpha = df.fuzzy.3.clusters[,2])
qplot(df.pca.pc1,df.pca.pc2, color = factor(colores[df.fuzzy.3.clusters[,1]]), alpha = df.fuzzy.3.clusters[,2])
qplot(df.pca.pc1,df.pca.pc2, color = factor(df.fuzzy.3.clusters[,1]), alpha = df.fuzzy.3.clusters[,2])
+ scale_colour_manual(values=colores)
qplot(df.pca.pc1,df.pca.pc2, color = factor(df.fuzzy.3.clusters[,1]), alpha = df.fuzzy.3.clusters[,2]) +  scale_colour_manual(values=colores)
col <- c("#766272","#4BDBC0","#F5AF3B")
qplot(df.pca.pc1,df.pca.pc2, color = factor(df.fuzzy.3.clusters[,1]), alpha = df.fuzzy.3.clusters[,2]) +  scale_colour_manual(values=col)
head(df)
head(scale(df))
df = scale(df)
df.dist = dist(df, method = "euclidean")
df.fuzzy.3 = fanny( df.dist, k = 3, diss = T,  memb.exp = 1.2, keep.diss = F, keep.data = F)
df.pca <- prcomp(df)
df.pca.pc1 <- df.pca$x[,1]
df.pca.pc2 <- df.pca$x[,2]
df.fuzzy.3.clusters = apply(df.fuzzy.3$membership, 1, which.max)
df.fuzzy.3.clusters = cbind(df.fuzzy.3.clusters, apply(df.fuzzy.3$membership, 1, max) )
head(df.fuzzy.3.clusters)
qplot(df.pca.pc1,df.pca.pc2, color = factor(df.fuzzy.3.clusters[,1]), alpha = df.fuzzy.3.clusters[,2]) +  scale_colour_manual(values=col)
qplot(df.pca.pc1,df.pca.pc2, color = factor(df.fuzzy.3.clusters[,1]), alpha = df.fuzzy.3.clusters[,2]) + scale_colour_manual(values=col) + labs(title="Clustering difuso sobre PCA",x="PC1",y="PC2",colour="Cluster")
pdf("asd.pdf")
# plot(silhouette(df.fuzzy.2))
plot(silhouette(df.fuzzy.3))
# plot(silhouette(df.fuzzy.4))
dev.off()
df.fuzzy.3.16 = fanny( df.dist, k = 3, diss = T,  memb.exp = 1.6, keep.diss = F, keep.data = F)
pdf("asd.pdf")
# plot(silhouette(df.fuzzy.2))
plot(silhouette(df.fuzzy.3.16))
# plot(silhouette(df.fuzzy.4))
dev.off()
df.fuzzy.3.alt = fanny( df.dist, k = 3, diss = T,  memb.exp = 1.5, keep.diss = F, keep.data = F)
df.fuzzy.3.alt = fanny( df.dist, k = 3, diss = T,  memb.exp = 1.4, keep.diss = F, keep.data = F)
pdf("asd.pdf")
# plot(silhouette(df.fuzzy.2))
plot(silhouette(df.fuzzy.3.alt))
# plot(silhouette(df.fuzzy.4))
dev.off()
pdf("asd.pdf")
# plot(silhouette(df.fuzzy.2))
plot(silhouette(df.fuzzy.3))
plot(silhouette(df.fuzzy.3.alt))
# plot(silhouette(df.fuzzy.4))
dev.off()
df.fuzzy.3.clusters.alt = apply(df.fuzzy.3.alt$membership, 1, which.max)
df.fuzzy.3.clusters.alt = cbind(df.fuzzy.3.clusters, apply(df.fuzzy.3.alt$membership, 1, max) )
qplot(df.pca.pc1,df.pca.pc2, color = factor(df.fuzzy.3.clusters.alt[,1]), alpha = df.fuzzy.3.clusters.alt[,2]) + scale_colour_manual(values=col) + labs(title="Clustering difuso sobre PCA",x="PC1",y="PC2",colour="Cluster")
head(df.fuzzy.3.clusters.alt)
df.fuzzy.3.alt$membership
df.fuzzy.3.clusters.alt = apply(df.fuzzy.3.alt$membership, 1, which.max)
df.fuzzy.3.clusters.alt = cbind(df.fuzzy.3.clusters.alt, apply(df.fuzzy.3.alt$membership, 1, max) )
qplot(df.pca.pc1,df.pca.pc2, color = factor(df.fuzzy.3.clusters.alt[,1]), alpha = df.fuzzy.3.clusters.alt[,2]) + scale_colour_manual(values=col) + labs(title="Clustering difuso sobre PCA",x="PC1",y="PC2",colour="Cluster")
head(df.fuzzy.3.clusters.alt)
head( sapply(df.fuzzy.3.clusters.alt[,2], function(x) { x } ) )
head( sapply(df.fuzzy.3.clusters.alt[,2], function(x) { if(x < 0.6) { 0 } else { x } } ) )
head( apply(df.fuzzy.3.clusters.alt, 1, function(x) { if(x[2] < 0.6) { c(0, x[2]) } else { x } } ) )
head( apply(df.fuzzy.3.clusters.alt, 1, function(x) { x ) )
head( apply(df.fuzzy.3.clusters.alt, 1, function(x) { x } ) )
head( apply(df.fuzzy.3.clusters.alt, 2, function(x) { x } ) )
head( apply(df.fuzzy.3.clusters.alt, 2, function(x) { if(x[2] < 0.6) { c(0, x[2]) } else { x } }  ) )
df.fuzzy.3.clusters.alt.0 = df.fuzzy.3.clusters.alt
head(df.fuzzy.3.clusters.alt.0)
head(df.fuzzy.3.clusters.alt.0[1, df.fuzzy.3.clusters.alt.0[2] < 0.6 ])
head(df.fuzzy.3.clusters.alt.0[df.fuzzy.3.clusters.alt.0[2] < 0.6, 1 ])
head(df.fuzzy.3.clusters.alt.0)
df.fuzzy.3.clusters.alt.0[2] < 0.6
head(df.fuzzy.3.clusters.alt.0[df.fuzzy.3.clusters.alt.0[,2] < 0.6, 1 ])
df.fuzzy.3.clusters.alt.0[df.fuzzy.3.clusters.alt.0[,2] < 0.6, 1 ] = 0
col <- c("#000000","#766272","#4BDBC0","#F5AF3B")
qplot(df.pca.pc1,df.pca.pc2, color = factor(df.fuzzy.3.clusters.alt.0[,1]), alpha = df.fuzzy.3.clusters.alt.0[,2]) + scale_colour_manual(values=col) + labs(title="Clustering difuso sobre PCA",x="PC1",y="PC2",colour="Cluster")
qplot(df.pca.pc1,df.pca.pc2, color = factor(df.fuzzy.3.clusters.alt.0[,1])) + scale_colour_manual(values=col) + labs(title="Clustering difuso sobre PCA",x="PC1",y="PC2",colour="Cluster")
df.fuzzy.3.clusters.0 = df.fuzzy.3.clusters
head(df.fuzzy.3.clusters.0)
df.fuzzy.3.clusters.0[df.fuzzy.3.clusters.0[,2] < 0.6, 1 ] = 0
head(df.fuzzy.3.clusters.0)
qplot(df.pca.pc1,df.pca.pc2, color = factor(df.fuzzy.3.clusters.0[,1])) + scale_colour_manual(values=col) + labs(title="Clustering difuso sobre PCA",x="PC1",y="PC2",colour="Cluster")
df.fuzzy.3$silinfo$widths[ df.fuzzy.3$silinfo$widths[,3] < 0, ]
df.fuzzy.3.negSil = df.fuzzy.3$silinfo$widths[ df.fuzzy.3$silinfo$widths[,3] < 0, ]
cbind ( df.fuzzy.3$membership[ rownames(df.fuzzy.3.negSil), ], df.fuzzy.3.negSil[,3] )
qplot(df.pca.pc1,df.pca.pc2, color = factor(df.fuzzy.3.clusters[,1])) + scale_colour_manual(values=col) + labs(title="Clustering difuso sobre PCA",x="PC1",y="PC2",colour="Cluster")
col <- c("#766272","#4BDBC0","#F5AF3B")
qplot(df.pca.pc1,df.pca.pc2, color = factor(df.fuzzy.3.clusters[,1])) + scale_colour_manual(values=col) + labs(title="Clustering difuso sobre PCA",x="PC1",y="PC2",colour="Cluster")
head(df.fuzzy.3.clusters)
head(df.fuzzy.3.clusters[ rownames(df.fuzzy.3.negSil) ,])
df.fuzzy.3.negSil
head(df.fuzzy.3.negSil)
df.fuzzy.3.clusters.negSil = df.fuzzy.3.clusters
df.fuzzy.3.clusters.negSil[ rownames(df.fuzzy.3.negSil), 1 ] = 0
negSil
qplot(df.pca.pc1,df.pca.pc2, color = factor(df.fuzzy.3.clusters.negSil[,1])) + scale_colour_manual(values=col) + labs(title="Clustering difuso sobre PCA",x="PC1",y="PC2",colour="Cluster")
col <- c("#000000","#766272","#4BDBC0","#F5AF3B")
qplot(df.pca.pc1,df.pca.pc2, color = factor(df.fuzzy.3.clusters.negSil[,1])) + scale_colour_manual(values=col) + labs(title="Clustering difuso sobre PCA",x="PC1",y="PC2",colour="Cluster")
par(c(2,1))
qplot(df.pca.pc1,df.pca.pc2, color = factor(df.fuzzy.3.clusters.negSil[,1])) + scale_colour_manual(values=col) + labs(title="Clustering difuso sobre PCA",x="PC1",y="PC2",colour="Cluster")
qplot(df.pca.pc1,df.pca.pc2, color = factor(df.fuzzy.3.clusters.negSil[,1])) + scale_colour_manual(values=col) + labs(title="Clustering difuso sobre PCA",x="PC1",y="PC2",colour="Cluster")
qplot(df.pca.pc1,df.pca.pc2, color = factor(df.fuzzy.3.clusters.0[,1])) + scale_colour_manual(values=col) + labs(title="Clustering difuso sobre PCA",x="PC1",y="PC2",colour="Cluster")
qplot(df.pca.pc1,df.pca.pc2, color = factor(df.fuzzy.3.clusters.negSil[,1])) + scale_colour_manual(values=col) + labs(title="Clustering difuso sobre PCA",x="PC1",y="PC2",colour="Cluster")
par(mfrow=c(2,1))
qplot(df.pca.pc1,df.pca.pc2, color = factor(df.fuzzy.3.clusters[,1]), alpha = df.fuzzy.3.clusters[,2]) + scale_colour_manual(values=col) + labs(title="Clustering difuso sobre PCA",x="PC1",y="PC2",colour="Cluster")
qplot(df.pca.pc1,df.pca.pc2, color = factor(df.fuzzy.3.clusters.negSil[,1])) + scale_colour_manual(values=col) + labs(title="Clustering difuso sobre PCA",x="PC1",y="PC2",colour="Cluster")
qplot(df.pca.pc1,df.pca.pc2, color = factor(df.fuzzy.3.clusters[,1]), alpha = df.fuzzy.3.clusters[,2]) + scale_colour_manual(values=col) + labs(title="Clustering difuso sobre PCA",x="PC1",y="PC2",colour="Cluster")
qplot(df.pca.pc1,df.pca.pc2, color = factor(df.fuzzy.3.clusters.0[,1])) + scale_colour_manual(values=col) + labs(title="Clustering difuso sobre PCA",x="PC1",y="PC2",colour="Cluster")
qplot(df.pca.pc1,df.pca.pc2, color = factor(df.fuzzy.3.clusters.negSil[,1])) + scale_colour_manual(values=col) + labs(title="Clustering difuso sobre PCA",x="PC1",y="PC2",colour="Cluster")
?labs
qplot(df.pca.pc1,df.pca.pc2, color = factor(df.fuzzy.3.clusters.0[,1])) + scale_colour_manual(values=col) + labs(title="Clustering difuso sobre PCA",x="PC1",y="PC2",colour="Cluster", subtitle= "asd")
qplot(df.pca.pc1,df.pca.pc2, color = factor(df.fuzzy.3.clusters.0[,1])) + scale_colour_manual(values=col) + labs(title="Clustering difuso sobre PCA \n asd",x="PC1",y="PC2",colour="Cluster", subtitle= "asd")
head(df.fuzzy.3.clusters.0)
df.fuzzy.3.clusters.0[,1] = as.factor(df.fuzzy.3.clusters.0[,1])
qplot(df.pca.pc1,df.pca.pc2, color = df.fuzzy.3.clusters.0[,1]) + scale_colour_manual(values=col) + labs(title="Clustering difuso sobre PCA \n asd",x="PC1",y="PC2",colour="Cluster")
qplot(df.pca.pc1,df.pca.pc2, color = df.fuzzy.3.clusters.0[,1] + scale_colour_manual(values=col) + labs(title="Clustering difuso sobre PCA \n asd",x="PC1",y="PC2",colour="Cluster")
qplot(df.pca.pc1,df.pca.pc2, color = df.fuzzy.3.clusters.0[,1] + scale_colour_manual(values=col) + labs(title="Clustering difuso sobre PCA \n asd",x="PC1",y="PC2",colour="Cluster")
qplot(df.pca.pc1,df.pca.pc2, color = df.fuzzy.3.clusters.0[,1] + scale_colour_manual(values=col) + labs(title="Clustering difuso sobre PCA \n asd",x="PC1",y="PC2",colour="Cluster")
qplot(df.pca.pc1,df.pca.pc2, color = df.fuzzy.3.clusters.0[,1] ) + scale_colour_manual(values=col) + labs(title="Clustering difuso sobre PCA \n asd",x="PC1",y="PC2",colour="Cluster")
qplot(df.pca.pc1,df.pca.pc2, color = df.fuzzy.3.clusters.0[,1] ) + scale_colour_manual(values=col) + labs(title="Clustering difuso sobre PCA \n asd",x="PC1",y="PC2",colour="Cluster")
df.fuzzy.3.clusters.0[,1]
head(df.fuzzy.3.clusters.0)
str(df.fuzzy.3.clusters.0)
df.fuzzy.3.clusters.0[df.fuzzy.3.clusters.0[,2] < 0.6, 1 ] = "0"
head(df.fuzzy.3.clusters.0)
df.fuzzy.3.clusters.0 = df.fuzzy.3.clusters
df.fuzzy.3.clusters.0[df.fuzzy.3.clusters.0[,2] < 0.6, 1 ] = "0 (Membresía < 0.6)"
qplot(df.pca.pc1,df.pca.pc2, color = df.fuzzy.3.clusters.0[,1] ) + scale_colour_manual(values=col) + labs(title="Clustering difuso sobre PCA \n asd",x="PC1",y="PC2",colour="Cluster")
qplot(df.pca.pc1,df.pca.pc2, color = df.fuzzy.3.clusters.0[,1] ) + scale_colour_manual(values=col) + labs(title="Clustering difuso sobre PCA",x="PC1",y="PC2",colour="Cluster")
df.fuzzy.3.clusters.negSil = df.fuzzy.3.clusters
df.fuzzy.3.clusters.negSil[ rownames(df.fuzzy.3.negSil), 1 ] = "0 (Silhuette < 0)"
qplot(df.pca.pc1,df.pca.pc2, color = factor(df.fuzzy.3.clusters.negSil[,1])) + scale_colour_manual(values=col) + labs(title="Clustering difuso sobre PCA",x="PC1",y="PC2",colour="Cluster")
nrow(df.fuzzy.3.clusters.0)
nrow(df.fuzzy.3.clusters.negSil)
df.fuzzy.3.clusters.negSil[ df.fuzzy.3.clusters.negSil[,1] == "0 (Silhuette < 0)" ]
los0 = head(df.fuzzy.3.clusters.negSil[ df.fuzzy.3.clusters.negSil[,1] == "0 (Silhuette < 0)" ])
head(df.fuzzy.3.clusters.negSil[ df.fuzzy.3.clusters.negSil[,1] == "0 (Silhuette < 0)" ])
head(df.fuzzy.3.clusters.negSil[ df.fuzzy.3.clusters.negSil[,1] == "0 (Silhuette < 0)",  ])
rownames(df.fuzzy.3.clusters.negSil[ df.fuzzy.3.clusters.negSil[,1] == "0 (Silhuette < 0)",  ])
a = rownames(df.fuzzy.3.clusters.negSil[ df.fuzzy.3.clusters.negSil[,1] == "0 (Silhuette < 0)",  ])
nrow(df.fuzzy.3.clusters.0[ a, ])
nrow(df.fuzzy.3.clusters.0[ a, ]) / nrow(df.fuzzy.3.clusters.0)
b = rownames(df.fuzzy.3.clusters.0[ df.fuzzy.3.clusters.0[,1] == "0 (Membresía < 0.6)",  ])
head(b)
nrows(a)
nrow(a)
a = rownames(df.fuzzy.3.clusters.negSil[ df.fuzzy.3.clusters.negSil[,1] == "0 (Silhuette < 0)",  ])
nrow(a)
a
b
nrow(b)
length(a)
length(b)
length( intersect(a,b) )
length( intersect(a,b) ) / length(b)
df.fuzzy.2$objective
?fanny
fuzzyResults.max = c()
for ( i in min(fuzzyResults$k):max(fuzzyResults$k) ) {
kFiltered = fuzzyResults[ fuzzyResults$k == i , ]
maxSilhuetteIndex = which.max(kFiltered[,c("silhuette_avg.width")])
fuzzyResults.max = rbind(fuzzyResults.max, kFiltered[maxSilhuetteIndex,] )
}
fuzzyResults.max
plot_ly(fuzzyResults.max, x = k, y= silhuette_avg.width, name="silhuette") %>%
add_trace(x = k, y = coeff, name="coeff")
library("plotly")
library(dplyr)
plot_ly(fuzzyResults.max, x = k, y= silhuette_avg.width, name="silhuette") %>%
add_trace(x = k, y = coeff, name="coeff")
plot_ly(fuzzyResults.max, x = k, y= silhuette_avg.width, name="silhouette") %>%
add_trace(x = k, y = coeff, name="coeff")
plot_ly(fuzzyResults.max, x = k, y= silhuette_avg.width, name="silhouette") %>%
add_trace(x = k, y = coeff, name="coeficiente de partición de Dunn")
plot_ly(fuzzyResults.max, x = k, y= silhuette_avg.width, name="silhouette") %>%
add_trace(x = k, y = coeff, name="coeficiente de Dunn")
silhouette_avg.width
qplot(k, silhuette_avg.width )
silhuette_avg.width
silhuette_avg.width
plot_ly(fuzzyResults.max, x = k, y= silhuette_avg.width, name="silhouette") %>%
add_trace(x = k, y = coeff, name="coeficiente de Dunn")
qplot(fuzzyResults.max$k, fuzzyResults.max$silhuette_avg.width )
plot_ly(fuzzyResults.max, x = k, y= silhuette_avg.width, name="silhouette") %>%
add_trace(x = k, y = coeff, name="coeficiente de Dunn")
plot_ly(fuzzyResults.max, x = k, y= silhuette_avg.width, name="silhouette" yaxis = list(title = "asd"))
plot_ly(fuzzyResults.max, x = k, y= silhuette_avg.width, name="silhouette", yaxis = list(title = "asd"))
plot_ly(fuzzyResults.max, x = k, y= silhuette_avg.width, name="silhouette") %>%
plot_ly(fuzzyResults.max, x = k, y= silhuette_avg.width, name="silhouette") %>%
add_trace(x = k, y = coeff, name="coeficiente de Dunn") %>%
layout( yaxis = list( title = "asd" ) )
plot_ly(fuzzyResults.max, x = k, y= silhuette_avg.width, name="silhouette") %>%
add_trace(x = k, y = coeff, name="coeficiente de Dunn") %>%
layout( yaxis = list( title = "asd" ) )
plot_ly(fuzzyResults.max, x = k, y= silhuette_avg.width, name="silhouette") %>%
add_trace(x = k, y = coeff, name="coeficiente de Dunn") %>%
layout( yaxis = list( title = "" ) )
plot_ly(fuzzyResults.max, x = k, y= silhuette_avg.width, name="silhouette") %>%
add_trace(x = k, y = coeff, name="coeficiente de Dunn") %>%
layout( yaxis = list( title = "" ), title = "asd" )
plot_ly(fuzzyResults.max, x = k, y= silhuette_avg.width, name="silhouette") %>%
add_trace(x = k, y = coeff, name="coeficiente de Dunn") %>%
layout( yaxis = list( title = "" ), title = "Elección del K" )
qplot(df.pca.pc1,df.pca.pc2, color = df.fuzzy.3.clusters.0[,1] ) + scale_colour_manual(values=col) + labs(title="Clustering difuso sobre PCA",x="PC1",y="PC2",colour="Cluster")
?prcomp
qplot(df.pca.pc1,df.pca.pc2, color = df.fuzzy.3.clusters.0[,1] ) + scale_colour_manual(values=col) + labs(title="Agrupamiento difuso sobre PCA",x="PC1",y="PC2",colour="Grupo")
?silhouette
df.dist
head(df[ -b, ])
head(df[ b, ])
head(df[ rownames(df.fuzzy.3.clusters.0[ df.fuzzy.3.clusters.0[,1] != "0 (Membresía < 0.6)",  ]), ])
df.no0 = df[ rownames(df.fuzzy.3.clusters.0[ df.fuzzy.3.clusters.0[,1] != "0 (Membresía < 0.6)",  ]), ]
df.no0.dist = dist(df.no0, method = "euclidean")
df.no0.fuzzy = fanny( df.no0.dist, k = 3, diss = T,  memb.exp = 1.2, keep.diss = F, keep.data = F)
pdf("silhouette_fuzzy.pdf")
# plot(silhouette(df.fuzzy.2))
plot(silhouette(df.fuzzy.3))
plot(silhouette(df.no0.fuzzy))
# plot(silhouette(df.fuzzy.3.alt))
# plot(silhouette(df.fuzzy.4))
dev.off()
df.no0.clusters = apply(df.no0.fuzzy$membership, 1, which.max)
df.no0.clusters = cbind(df.no0.clusters, apply(df.no0.fuzzy$membership, 1, max) )
head(df.no0.clusters)
df.no0.clusters[df.no0.clusters[,2] < 0.6, 1 ]
df.no0.clusters[df.no0.clusters[,2] < 0.6, ]
nrow(df.no0.clusters[df.no0.clusters[,2] < 0.6, ])
nrow(df.fuzzy.3.clusters.0[,2])
df.fuzzy.3.clusters.0
nrow(df.fuzzy.3.clusters.0) = df.fuzzy.3.clusters
length(df.fuzzy.3.clusters.0)
length(df.fuzzy.3.clusters.0[1,] ==  "0 (Membresía < 0.6)")
df.fuzzy.3.clusters.0[1,] ==  "0 (Membresía < 0.6)"
length(df.fuzzy.3.clusters.0[,1] ==  "0 (Membresía < 0.6)")
length( intersect(a,b) ) / length(b)
intersect(a,b)
length( intersect(a,b) )
df[ -intersect(a,b), ]
length(rownames(df)-intersect(a,b))
rownames(df)
intersect(a,b)
?intersect
c = setdiff(rownames(df),intersect(a,b))
length(c)
length(rownames(df))
length(rownames(df)) - length(intersect(a,b))
length(c)
df.no0 = df[ c, ]
df.no0.dist = dist(df.no0, method = "euclidean")
head(df.fuzzy.3$clustering)
?silhouette
clust = df.fuzzy.3$clustering
df.fuzzy.3.asd = df.fuzzy.3
df.fuzzy.3.asd$clustering[ c, ]
df.fuzzy.3.asd$clustering[ c ]
df.fuzzy.3.asd$clustering = df.fuzzy.3.asd$clustering[ c ]
length(df.fuzzy.3.asd$clustering)
pdf("silhouette_fuzzy.pdf")
# plot(silhouette(df.fuzzy.2))
plot(silhouette(df.fuzzy.3))
plot(silhouette(df.fuzzy.3.asd))
plot(silhouette(df.no0.fuzzy))
# plot(silhouette(df.fuzzy.3.alt))
# plot(silhouette(df.fuzzy.4))
dev.off()
length(df.fuzzy.3.asd$clustering)
length(df.fuzzy.3.asd$membership)
nrow(df.fuzzy.3.asd$membership)
df.fuzzy.3.asd$membership = df.fuzzy.3.asd$membership[ c, ]
length(df.fuzzy.3.asd$membership)
length(df.fuzzy.3.asd$membership)
head(df.fuzzy.3.asd$membership)
nrow(df.fuzzy.3.asd$membership)
length(df.fuzzy.3.asd$clustering)
nrow(df.fuzzy.3.asd$membership)
pdf("silhouette_fuzzy.pdf")
# plot(silhouette(df.fuzzy.2))
plot(silhouette(df.fuzzy.3))
plot(silhouette(df.fuzzy.3.asd))
plot(silhouette(df.no0.fuzzy))
# plot(silhouette(df.fuzzy.3.alt))
# plot(silhouette(df.fuzzy.4))
dev.off()
df.no0 = df[ c, ]
df.no0.dist = dist(df.no0, method = "euclidean")
nrow(df.no0)
df.no0.fuzzy = fanny( df.no0.dist, k = 3, diss = T,  memb.exp = 1.2, keep.diss = F, keep.data = F)
pdf("silhouette_fuzzy.pdf")
# plot(silhouette(df.fuzzy.2))
plot(silhouette(df.fuzzy.3))
# plot(silhouette(df.fuzzy.3.asd))
plot(silhouette(df.no0.fuzzy))
# plot(silhouette(df.fuzzy.3.alt))
# plot(silhouette(df.fuzzy.4))
dev.off()
head(df.fuzzy.3.clusters)
head(df.fuzzy.3.clusters.0, n=10)
df.fuzzy.3.clusters.0yNegSil = df.fuzzy.3.clusters.0
df.fuzzy.3.clusters.0yNegSil = df.fuzzy.3.clusters.0yNegSil[ intersect(a,b), 1 ] = "Membresía < 0.6 y Silhuette < 0"
df.fuzzy.3.clusters.0yNegSil[ df.fuzzy.3.clusters.0yNegSil[1] =="Membresía < 0.6 y Silhuette < 0",  ]
df.fuzzy.3.clusters.0yNegSil[ intersect(a,b), 1 ] = "Membresía < 0.6 y Silhuette < 0"
df.fuzzy.3.clusters.0yNegSil
df.fuzzy.3.clusters.0yNegSil = df.fuzzy.3.clusters.0
df.fuzzy.3.clusters.0yNegSil[ intersect(a,b), 1 ] = "Membresía < 0.6 y Silhuette < 0"
df.fuzzy.3.clusters.0yNegSil[ df.fuzzy.3.clusters.0yNegSil[1] =="Membresía < 0.6 y Silhuette < 0",  ]
df.fuzzy.3.clusters.0yNegSil
df.fuzzy.3.clusters.0yNegSil[ df.fuzzy.3.clusters.0yNegSil[1, ] =="Membresía < 0.6 y Silhuette < 0",  ]
df.fuzzy.3.clusters.0yNegSil
df.fuzzy.3.clusters.0yNegSil[ df.fuzzy.3.clusters.0yNegSil[, 1] == "Membresía < 0.6 y Silhuette < 0",  ]
col <- c("#000000","#FF0000", "#766272","#4BDBC0","#F5AF3B")
qplot(df.pca.pc1,df.pca.pc2, color = df.fuzzy.3.clusters.0yNegSil[,1] ) + scale_colour_manual(values=col) + labs(title="Agrupamiento difuso sobre PCA",x="PC1",y="PC2",colour="Grupo")
df.fuzzy.3.clusters.0yNegSil[ df.fuzzy.3.clusters.0yNegSil[, 1] == "0 (Membresía < 0.6)",  ] = "Membresía < 0.6"
qplot(df.pca.pc1,df.pca.pc2, color = df.fuzzy.3.clusters.0yNegSil[,1] ) + scale_colour_manual(values=col) + labs(title="Agrupamiento difuso sobre PCA",x="PC1",y="PC2",colour="Grupo")
col <- c("#766272","#4BDBC0","#F5AF3B","#000000","#FF0000")
qplot(df.pca.pc1,df.pca.pc2, color = df.fuzzy.3.clusters.0yNegSil[,1] ) + scale_colour_manual(values=col) + labs(title="Agrupamiento difuso sobre PCA",x="PC1",y="PC2",colour="Grupo")
df = read.csv("data_clean.csv",row.names = 1) #mirar si esta escalado
summary(df)
summary(scale(df))
df.dist = dist(df, method = "euclidean")
randomRows <- function(df,n){
return(df[sample(nrow(df),n),])
}
cat("n","k","time", file = "fuzzy_performance.csv", sep = ",", append = F, fill = T)
for(n in seq(from=500,to=14000,by=500)){
ddata <- randomRows(df,n)
ddist <- dist(ddata)
t0 =  Sys.time()
r <- fanny( ddist, k = 3, diss = T,  memb.exp = 1.2, keep.diss = F, keep.data = F) #pam.runner(ddist,ddata,k.optimal)
t1 =  Sys.time()
tiempo = as.numeric(  t1 - t0, units = "secs" )
print(paste(tiempo,n,sep="----"))
cat(n,3,tiempo, file = "fuzzy_performance.csv", sep = ",", append = T, fill = T)
}
nrow( df[ df$ApD_Rmag < 0, ] )
df.performance <- read.csv("fuzzy_performance.csv")
qplot(df.performance$n,df.performance$time) + stat_smooth() + labs(title="Agrupamiento difuso: Tiempo de ejecución",x="Observaciones",y="Tiempo (secs)")
df = read.csv("data_clean.csv",row.names = 1)
df <- dfcomp[-c(1,2)]
df <- df[-c(1,2)]
str(df)
df.dist = dist(df, method = "euclidean")
